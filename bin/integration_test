#!/usr/bin/env ruby

require "bundler/setup"
require "promenade"
require "fileutils"
require "net/http"
require "./spec/support/integration_tests/metrics_line"
require "./spec/support/integration_tests/label_value"

def test_http_body(expected)
  expectation = MetricsLine.new(expected)
  uri = URI("http://localhost:9394/metrics")

  Net::HTTP.start(uri.host, uri.port) do |http|
    request = Net::HTTP::Get.new uri
    response = http.request request
    unless response.body.each_line.detect do |string|
      next if string.start_with?("#")

      MetricsLine.new(string) == expectation
    end
      fail "#{response.body} didn't include #{expected}"
    end
  end
end

Promenade.setup

pid = Process.spawn "exe/promenade"
sleep 1

at_exit do
  Process.kill "SIGTERM", pid
  Process.waitpid(pid)
end

Promenade.counter :widgets_created do
  doc "Records how many widgets are created"
end

Promenade.metric(:widgets_created).increment({ type: "guinness" })
test_http_body('widgets_created{type="guinness"} 1')

Promenade.metric(:widgets_created).increment({ type: "john-smiths" })
test_http_body('widgets_created{type="guinness"} 1')
test_http_body('widgets_created{type="john-smiths"} 1')

Promenade.histogram :calculator_time_taken do
  doc "Records how long it takes to do the adding"
  buckets [0.25, 0.5, 1, 2, 4]
end

Promenade.metric(:calculator_time_taken).observe({ operation: "addition" }, 0.5)
Promenade.metric(:calculator_time_taken).observe({ operation: "addition" }, 0.5)
Promenade.metric(:calculator_time_taken).observe({ operation: "addition" }, 1)

test_http_body('calculator_time_taken_bucket{operation="addition",le="0.25"} 0')
test_http_body('calculator_time_taken_bucket{operation="addition",le="0.5"} 2')
test_http_body('calculator_time_taken_bucket{operation="addition",le="1"} 3')
test_http_body('calculator_time_taken_bucket{operation="addition",le="1"} 3')

exit
